'use strict';

(function () {
  'use strict';

  angular.module('starter.services', ['LocalStorageModule']).factory('$stream', function (socketFactory) {
    var mySocket = io.connect('http://localhost:3000');

    return socketFactory({
      ioSocket: mySocket
    });
  }).service('authProvider', function ($q, $http, localStorageService) {
    var _loggedIn = false,
        _loaded = $q.defer();

    setAuthorizationHeadersFromStore();
    me()['finally'](_loaded.resolve);

    return {
      register: register,
      login: login,
      me: me,
      logout: logout,
      loggedIn: loggedIn,
      loaded: loaded
    };

    function loaded() {
      return _loaded.promise;
    }

    function login(username, password) {
      setAuthorizationHeaders(username, password);
      return me();
    }

    function me() {
      return $http.get('http://localhost:3000/me').then(loggedIn.bind(this, true));
    }

    function register(username, password) {
      var params = {
        username: username,
        password: password
      };

      setAuthorizationHeaders();
      return $http.post('http://localhost:3000/register', params).then(loggedIn.bind(this, true));
    }

    function logout() {
      saveTokenToStore(null);
      loggedIn(false);
    }

    function loggedIn(value) {
      if (value !== undefined) _loggedIn = true;

      return _loggedIn;
    }

    function setAuthorizationHeaders(username, password) {
      if (username && password) {
        var token = btoa(username + ':' + password);
        $http.defaults.headers.common.Authorization = 'Basic ' + token;
        saveTokenToStore(token);
      }
    }

    function setAuthorizationHeadersFromStore() {
      console.log('token', tokenFromStore());
      if (tokenFromStore()) $http.defaults.headers.common.Authorization = 'Basic ' + tokenFromStore();
    }

    function saveTokenToStore() {
      var token = arguments[0] === undefined ? null : arguments[0];

      localStorageService.set('authorizationToken', token);
    }

    function tokenFromStore() {
      return localStorageService.get('authorizationToken');
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,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QUFFLEVBQ2xCLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsUUFBUSxHQUFHLGNBQWMsRUFBRSxDQUFDO0tBQzdFOztBQUVELGFBQVMsZ0JBQWdCLEdBQWU7VUFBZCxLQUFLLGdDQUFHLElBQUk7O0FBQ3BDLHlCQUFtQixDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN0RDs7QUFFRCxhQUFTLGNBQWMsR0FBRztBQUN4QixhQUFPLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0tBQ3REO0dBQ0YsQ0FBQyxDQUFDO0NBQ04sQ0FBQSxFQUFHLENBQUMiLCJmaWxlIjoic2VydmljZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgnc3RhcnRlci5zZXJ2aWNlcycsIFsnTG9jYWxTdG9yYWdlTW9kdWxlJ10pXG4gICAgLmZhY3RvcnkoJyRzdHJlYW0nLCBmdW5jdGlvbihzb2NrZXRGYWN0b3J5KSB7XG4gICAgICB2YXIgbXlTb2NrZXQgPSBpby5jb25uZWN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAnKTtcblxuICAgICAgcmV0dXJuIHNvY2tldEZhY3Rvcnkoe1xuICAgICAgICBpb1NvY2tldDogbXlTb2NrZXRcbiAgICAgIH0pO1xuICAgIH0pXG5cbiAgICAuc2VydmljZSgnYXV0aFByb3ZpZGVyJywgZnVuY3Rpb24oJHEsICRodHRwLCBsb2NhbFN0b3JhZ2VTZXJ2aWNlKSB7XG4gICAgICB2YXIgX2xvZ2dlZEluID0gZmFsc2UsXG4gICAgICAgICAgX2xvYWRlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgIHNldEF1dGhvcml6YXRpb25IZWFkZXJzRnJvbVN0b3JlKCk7XG4gICAgICBtZSgpLmZpbmFsbHkoX2xvYWRlZC5yZXNvbHZlKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxuICAgICAgICBsb2dpbjogbG9naW4sXG4gICAgICAgIG1lOiBtZSxcbiAgICAgICAgbG9nb3V0OiBsb2dvdXQsXG4gICAgICAgIGxvZ2dlZEluOiBsb2dnZWRJbixcbiAgICAgICAgbG9hZGVkOiBsb2FkZWRcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGxvYWRlZCgpIHtcbiAgICAgICAgcmV0dXJuIF9sb2FkZWQucHJvbWlzZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIHNldEF1dGhvcml6YXRpb25IZWFkZXJzKHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gICAgICAgIHJldHVybiBtZSgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtZSgpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL21lJylcbiAgICAgICAgICAudGhlbihsb2dnZWRJbi5iaW5kKHRoaXMsIHRydWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICB9O1xuXG4gICAgICAgIHNldEF1dGhvcml6YXRpb25IZWFkZXJzKCk7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvcmVnaXN0ZXInLCBwYXJhbXMpXG4gICAgICAgICAgLnRoZW4obG9nZ2VkSW4uYmluZCh0aGlzLCB0cnVlKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgICAgc2F2ZVRva2VuVG9TdG9yZShudWxsKTtcbiAgICAgICAgbG9nZ2VkSW4oZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsb2dnZWRJbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICBfbG9nZ2VkSW4gPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBfbG9nZ2VkSW47XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldEF1dGhvcml6YXRpb25IZWFkZXJzKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICBpZiAodXNlcm5hbWUgJiYgcGFzc3dvcmQpIHtcbiAgICAgICAgICB2YXIgdG9rZW4gPSAgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyB0b2tlbjtcbiAgICAgICAgICBzYXZlVG9rZW5Ub1N0b3JlKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXRBdXRob3JpemF0aW9uSGVhZGVyc0Zyb21TdG9yZSgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Rva2VuJywgdG9rZW5Gcm9tU3RvcmUoKSk7XG4gICAgICAgIGlmICh0b2tlbkZyb21TdG9yZSgpKVxuICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIHRva2VuRnJvbVN0b3JlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNhdmVUb2tlblRvU3RvcmUodG9rZW4gPSBudWxsKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KCdhdXRob3JpemF0aW9uVG9rZW4nLCB0b2tlbik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRva2VuRnJvbVN0b3JlKCkge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoJ2F1dGhvcml6YXRpb25Ub2tlbicpO1xuICAgICAgfVxuICAgIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==