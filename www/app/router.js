'use strict';

(function () {
  'use strict';

  angular.module('starter').config(Router).config(handleUnauthorizedResponse).run(authorizeRoutes);

  function handleUnauthorizedResponse($httpProvider) {
    var handleUnauthorized = ['$q', '$location', function ($q, $location) {
      return {
        responseError: handleError
      };

      function handleError(response) {
        if (response.status === 401) $location.path('/login');

        return $q.reject(response);
      }
    }];

    $httpProvider.interceptors.push(handleUnauthorized);
  }

  function authorizeRoutes($rootScope, authProvider, $state) {
    authProvider.loaded().then(function () {
      $rootScope.$on('$stateChangeStart', function (event, next) {
        if (next.name.indexOf('login') == -1 && !authProvider.loggedIn()) {
          event.preventDefault();
          $state.go('login');
        }
      });
    });
  }

  function Router($stateProvider, $urlRouterProvider) {
    $stateProvider.state('login', {
      url: '/login',
      templateUrl: 'app/login/login.html',
      controller: 'LoginCtrl as ctrl'
    }).state('game', {
      url: '/game',
      abstract: true,
      templateUrl: 'app/game/game.html'
    }).state('game.users', {
      url: '/users',
      views: {
        'game-users': {
          templateUrl: 'app/users/users.html',
          controller: 'UsersCtrl as ctrl'
        }
      }
    }).state('game.current', {
      url: '/current',
      views: {
        'game-current': {
          templateUrl: 'app/current/current.html',
          controller: 'CurrentCtrl as ctrl'
        }
      }
    }).state('game.account', {
      url: '/account',
      views: {
        'game.account': {
          templateUrl: 'templates/tab-account.html',
          controller: 'AccountCtrl'
        }
      }
    });

    $urlRouterProvider.otherwise('/game/users');
  }
})();
//# sourceMappingURL=data:application/json;base64,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c3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnc3RhcnRlcicpXG4gICAgLmNvbmZpZyhSb3V0ZXIpXG4gICAgLmNvbmZpZyhoYW5kbGVVbmF1dGhvcml6ZWRSZXNwb25zZSlcbiAgICAucnVuKGF1dGhvcml6ZVJvdXRlcyk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlVW5hdXRob3JpemVkUmVzcG9uc2UoJGh0dHBQcm92aWRlcikge1xuICAgIHZhciBoYW5kbGVVbmF1dGhvcml6ZWQgPSBbJyRxJywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uICgkcSwgJGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNwb25zZUVycm9yOiBoYW5kbGVFcnJvclxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlRXJyb3IocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKVxuICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcblxuICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9XTtcblxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goaGFuZGxlVW5hdXRob3JpemVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF1dGhvcml6ZVJvdXRlcygkcm9vdFNjb3BlLCBhdXRoUHJvdmlkZXIsICRzdGF0ZSkge1xuICAgIGF1dGhQcm92aWRlci5sb2FkZWQoKVxuICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uKGV2ZW50LCBuZXh0KSB7XG4gICAgICAgICAgaWYgKG5leHQubmFtZS5pbmRleE9mKCdsb2dpbicpID09IC0xICYmICFhdXRoUHJvdmlkZXIubG9nZ2VkSW4oKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBSb3V0ZXIoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9sb2dpbi9sb2dpbi5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCBhcyBjdHJsJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnZ2FtZScsIHtcbiAgICAgICAgdXJsOiAnL2dhbWUnLFxuICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvZ2FtZS9nYW1lLmh0bWwnXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdnYW1lLnVzZXJzJywge1xuICAgICAgICB1cmw6ICcvdXNlcnMnLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdnYW1lLXVzZXJzJzoge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvdXNlcnMvdXNlcnMuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlcnNDdHJsIGFzIGN0cmwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdnYW1lLmN1cnJlbnQnLCB7XG4gICAgICAgIHVybDogJy9jdXJyZW50JyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnZ2FtZS1jdXJyZW50Jzoge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY3VycmVudC9jdXJyZW50Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0N1cnJlbnRDdHJsIGFzIGN0cmwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdnYW1lLmFjY291bnQnLCB7XG4gICAgICAgIHVybDogJy9hY2NvdW50JyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnZ2FtZS5hY2NvdW50Jzoge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdGFiLWFjY291bnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQWNjb3VudEN0cmwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9nYW1lL3VzZXJzJyk7XG4gIH1cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=